//
//  Constants.swift
//  IOWalletCIE
//
//  Created by Antonio Caparello on 25/02/25.
//


internal import SwiftASN1


enum SecurityEnvironmentControlReference : UInt8 {
    //    case MSE_SET = 1
    //    case UQ_COM_DEC_INTAUT = 64
    //    case UQ_VER_ENC_EXTAUT = 128
    
    case MSE_SET_EXTERNAL_AUTH = 0x81 //MSE_SET | UQ_VER_ENC_EXTAUT
    case MSE_SET_INTERNAL_AUTH = 0x41 //MSE_SET | UQ_COM_DEC_INTAUT
    
    var description: String {
        return "\(self) (\([self.rawValue].hexEncodedString))"
    }
    
}

//IAS ECC v1_0_1UK.pdf 3.5.6.1 Control Reference Templates list
/*
 'A4' Data objects for an Authentication Template (AT)
 'A6' Data objects for a Key Agreement Template (KAT)
 'AA' Data objects for a Hash Template (HT)
 'B4' Data objects for a Cryptographic Checksum Template (CCT)
 'B6' Data objects for an Digital Signature Template (DST)
 'B8' Data objects for an Confidentiality Template (CT)
 */
enum SecurityEnvironmentControlReferenceTemplate: UInt8 {
    case authentication = 0xA4 //Authentication Template (AT)
    case keyAgreement = 0xA6 //Key Agreement Template (KAT)
    case digitalSignature = 0xB6 //Digital Signature Template (DST)
    
    var description: String {
        return "\(self) (\([self.rawValue].hexEncodedString))"
    }
}

enum FileId : String {
    case root = "3f00"
    
    case service = "1001"
    case chipCertificate = "1003"
    case chipPublicKey = "1004"
    case atr = "2f01"
    
    case ias = "A0000000308000000009816001"
    case cie = "A00000000039"
    
    case empty = ""
    
    var bytes: [UInt8] {
        guard let data = [UInt8](hex: self.rawValue) else {
            return []
        }
        return data
    }
    
    var description: String {
        return "\(self) (\(self.rawValue))"
    }
}

enum DirectoryId: UInt8 {
    case root = 0x00
    case standard = 0x02
    case application = 0x04
    
    var description: String {
        return "\(self) (\([self.rawValue].hexEncodedString))"
    }
}

enum FileTemplateId: UInt8 {
    case root = 0x00
    case standard = 0x04
    case application = 0x0c
    
    var description: String {
        return "\(self) (\([self.rawValue].hexEncodedString))"
    }
}

enum SecurityEnvironmentAlgorithm : UInt8 {
    case iso97962RSASHA256 = 0x41 //'41' ≡ algorithm identifier for signature using ISO 9796-2 scheme 1 – SHA-256
    case diffieHellmanRSASHA256 = 0x9B //'9B' ≡ DH asymmetric authentication algorithm (privacy) with SHA-256
    case clientServerRSAPKCS1 = 2 //'02' ≡ algorithm identifier for IFC/ICC authentication RSA PKCS#1 -SHA-1 with not data formatting
    
    
    var description: String {
        return "\(self) (\([self.rawValue].hexEncodedString))"
    }
    
}

enum SecurityEnvironmentKeyId: UInt8 {
    case sign = 0x81
    case internalAuth = 0x82
    case externalAuth = 0x84
    
    var description: String {
        return "\(self) (\([self.rawValue].hexEncodedString))"
    }
}



enum DiffieHellmanValue: String {
    //3.4.6.5 Domain Parameters for Key agreement DH
    case g = "97"
    case p = "98"
    case q = "99"
    
    
    case iccPublicKey = "91" //‘9100’ TL pair to indicate retrieval of K.ICC
    
    case externalParameters = "7F49" //RSA public key '7F49'
    
    private var length: UInt8 {
        switch(self) {
            case .g, .p, .q, .iccPublicKey:
                return 0x00
            case .externalParameters:
                return 0x80
        }
    }
    
    private var valueWithLength: [UInt8] {
        return Utils.join([
            [UInt8](hex: self.rawValue) ?? [],
            [self.length]
        ])
    }
    
    private var inside: [UInt8] {
        switch(self) {
            case .g, .p, .q:
                return Utils.wrapDO(b: 0x70, arr:
                                        Utils.join([
                                            [0xBF],
                                            Utils.wrapDO1(b: 0xA101, arr:
                                                            Utils.wrapDO(b: 0xA3, arr:
                                                                            valueWithLength
                                                                        ))
                                        ]))
            case .iccPublicKey:
                return Utils.wrapDO(b: 0xA6, arr: valueWithLength)
                
            case .externalParameters:
                return Utils.wrapDO(b: 0x70, arr:
                                        Utils.join([
                                            [0xBF],
                                            Utils.wrapDO1(b: 0xA004, arr:
                                                            valueWithLength
                                                         )
                                        ]))
        }
        
    }
    
    var bytes: [UInt8] {
        return Utils.wrapDO(b: 0x4D, arr: self.inside)
    }
    
    var description: String {
        return "\(self) (\(self.rawValue))"
    }
}

class Constants {
    
    static let terminalSerialNumber: [UInt8] = [0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01]
    
    static let sha256Size = 32
    
    static let securityContainer: ASN1Identifier = ASN1Identifier(tagWithNumber: 4100, tagClass: .contextSpecific)
    static let keyManagementContainer: ASN1Identifier = ASN1Identifier(tagWithNumber: 73, tagClass: .application)
    static let modulus: ASN1Identifier = ASN1Identifier(tagWithNumber: 1, tagClass: .contextSpecific)
    static let exponent: ASN1Identifier = ASN1Identifier(tagWithNumber: 2, tagClass: .contextSpecific)
    static let certificateHolderAuthorization: ASN1Identifier = ASN1Identifier(tagWithNumber: 76, tagClass: .application)
    static let certificateHolderReference: ASN1Identifier = ASN1Identifier(tagWithNumber: 32, tagClass: .application)
    static let valueContainerId: ASN1Identifier = ASN1Identifier(tagWithNumber: 3, tagClass: .contextSpecific)
    static let containerId: ASN1Identifier = ASN1Identifier(tagWithNumber: 4225, tagClass: .contextSpecific)
    static let rootId: ASN1Identifier = ASN1Identifier(tagWithNumber: 16, tagClass: .application)
    static let iccRootId: ASN1Identifier = ASN1Identifier(tagWithNumber: 6, tagClass: .contextSpecific)
    
   
    static let DH_EXT_AUTH_PRIVATE_EXP: [UInt8] = [
        0x18, 0x6B, 0x31, 0x48, 0x8C, 0x25, 0xDC, 0xF8, 0x5D, 0x95, 0x3D, 0x36, 0x30, 0xC0, 0xD0, 0x73,
        0xBA, 0x1C, 0x6A, 0xA2, 0x45, 0x81, 0xAD, 0x25, 0x4F, 0x3B, 0x67, 0x19, 0xC5, 0xD7, 0x2C, 0xCA,
        0x3E, 0x5C, 0xDC, 0x5A, 0x1E, 0x53, 0x16, 0x57, 0x8D, 0x75, 0x95, 0x4F, 0xF7, 0x3B, 0x23, 0x7B,
        0x53, 0x2C, 0x9F, 0x8D, 0xE4, 0xA2, 0xC4, 0xC9, 0x11, 0x38, 0x5A, 0x23, 0xE6, 0x3E, 0x33, 0xE4,
        0x7E, 0xE4, 0x5E, 0x66, 0xEF, 0xD4, 0x9B, 0x18, 0xE0, 0x2C, 0xFF, 0x87, 0x59, 0x8C, 0x39, 0x10,
        0x9E, 0x8F, 0x86, 0xA6, 0x6B, 0xC3, 0x30, 0x24, 0x9C, 0xE3, 0xFC, 0xAD, 0x65, 0x5D, 0xCD, 0xBF,
        0x98, 0xC9, 0xC5, 0xE4, 0x79, 0x32, 0x1A, 0xF5, 0x3B, 0x51, 0x7D, 0x04, 0x10, 0x61, 0x88, 0x0A,
        0x64, 0x7B, 0xBE, 0x0F, 0xF8, 0x13, 0x68, 0x34, 0x70, 0xE6, 0xC5, 0x00, 0x94, 0xCE, 0x81, 0xD0,
        0x64, 0xE2, 0x04, 0xE3, 0x51, 0xBD, 0x3A, 0xE0, 0xA7, 0x94, 0x7D, 0x8E, 0x91, 0xC3, 0xFD, 0x5C,
        0x0A, 0x15, 0x23, 0x3C, 0x34, 0x9A, 0x52, 0x15, 0xA4, 0xE6, 0x6E, 0x21, 0xC5, 0xD3, 0x34, 0x98,
        0xE7, 0x19, 0x91, 0xEA, 0x24, 0x47, 0x3B, 0x29, 0xF1, 0x47, 0x5F, 0x6F, 0xD9, 0xBE, 0x39, 0x96,
        0xE1, 0x9B, 0xD4, 0x74, 0xFA, 0xD1, 0xB4, 0x1E, 0xA0, 0xDC, 0xD2, 0xFC, 0x16, 0xC9, 0xBF, 0xFA,
        0x07, 0x1B, 0xFE, 0xC1, 0xB2, 0x24, 0x15, 0x18, 0x48, 0x11, 0xC1, 0x98, 0x5F, 0xBF, 0xE3, 0xE7,
        0xB4, 0xF4, 0x4A, 0x4B, 0x3C, 0x8D, 0xFA, 0xB4, 0xD9, 0x0C, 0xEC, 0xFC, 0x5E, 0x60, 0x8D, 0x67,
        0x3E, 0x67, 0x62, 0xC6, 0x2C, 0xB7, 0x98, 0x34, 0x12, 0x71, 0x14, 0x9B, 0xA6, 0x88, 0x16, 0x2E,
        0xC7, 0xD0, 0xE3, 0x46, 0x8F, 0x65, 0xA9, 0x4A, 0xB4, 0xAD, 0x1A, 0xB6, 0x7E, 0x37, 0xBF, 0xC1 ]
    
    static let DAPP_PRIVATE_KEY: RSAKeyValue = RSAKeyValue(modulus: Constants.DAPP_KEY_MODULUS, exponent: Constants.DAPP_KEY_PRIVATE_EXPONENT)
    
    static let DAPP_KEY_MODULUS: [UInt8] = [ 0xba, 0x28, 0x37, 0xab, 0x4c, 0x6b, 0xb8, 0x27, 0x57, 0x7b, 0xff, 0x4e, 0xb7, 0xb1, 0xe4, 0x9c, 0xdd, 0xe0, 0xf1, 0x66, 0x14, 0xd1, 0xef, 0x24, 0xc1, 0xb7, 0x5c, 0xf7, 0x0f, 0xb1, 0x2c, 0xd1, 0x8f, 0x4d, 0x14, 0xe2, 0x81, 0x4b, 0xa4, 0x87, 0x7e, 0xa8, 0x00, 0xe1, 0x75, 0x90, 0x60, 0x76, 0xb5, 0x62, 0xba, 0x53, 0x59, 0x73, 0xc5, 0xd8, 0xb3, 0x78, 0x05, 0x1d, 0x8a, 0xfc, 0x74, 0x07, 0xa1, 0xd9, 0x19, 0x52, 0x9e, 0x03, 0xc1, 0x06, 0xcd, 0xa1, 0x8d, 0x69, 0x9a, 0xfb, 0x0d, 0x8a, 0xb4, 0xfd, 0xdd, 0x9d, 0xc7, 0x19, 0x15, 0x9a, 0x50, 0xde, 0x94, 0x68, 0xf0, 0x2a, 0xb1, 0x03, 0xe2, 0x82, 0xa5, 0x0e, 0x71, 0x6e, 0xc2, 0x3c, 0xda, 0x5b, 0xfc, 0x4a, 0x23, 0x2b, 0x09, 0xa4, 0xb2, 0xc7, 0x07, 0x45, 0x93, 0x95, 0x49, 0x09, 0x9b, 0x44, 0x83, 0xcb, 0xae, 0x62, 0xd0, 0x09, 0x96, 0x74, 0xdb, 0xf6, 0xf3, 0x9b, 0x72, 0x23, 0xa9, 0x9d, 0x88, 0xe3, 0x3f, 0x1a, 0x0c, 0xde, 0xde, 0xeb, 0xbd, 0xc3, 0x55, 0x17, 0xab, 0xe9, 0x88, 0x0a, 0xab, 0x24, 0x0e, 0x1e, 0xa1, 0x66, 0x28, 0x3a, 0x27, 0x4a, 0x9a, 0xd9, 0x3b, 0x4b, 0x1d, 0x19, 0xf3, 0x67, 0x9f, 0x3e, 0x8b, 0x5f, 0xf6, 0xa1, 0xe0, 0xed, 0x73, 0x6e, 0x84, 0xd5, 0xab, 0xe0, 0x3c, 0x59, 0xe7, 0x34, 0x6b, 0x42, 0x18, 0x75, 0x5d, 0x75, 0x36, 0x6c, 0xbf, 0x41, 0x36, 0xf0, 0xa2, 0x6c, 0x3d, 0xc7, 0x0a, 0x69, 0xab, 0xaa, 0xf6, 0x6e, 0x13, 0xa1, 0xb2, 0xfa, 0xad, 0x05, 0x2c, 0xa6, 0xec, 0x9c, 0x51, 0xe2, 0xae, 0xd1, 0x4d, 0x16, 0xe0, 0x90, 0x25, 0x4d, 0xc3, 0xf6, 0x4e, 0xa2, 0xbd, 0x8a, 0x83, 0x6b, 0xba, 0x99, 0xde, 0xfa, 0xcb, 0xa3, 0xa6, 0x13, 0xae, 0xed, 0xd9, 0x3a, 0x96, 0x15, 0x27, 0x3d ]
    
    static let DAPP_KEY_PRIVATE_EXPONENT: [UInt8] = [0x47, 0x16, 0xc2, 0xa3, 0x8c, 0xcc, 0x7a, 0x07, 0xb4, 0x15, 0xeb, 0x1a, 0x61, 0x75, 0xf2, 0xaa, 0xa0, 0xe4, 0x9c, 0xea, 0xf1, 0xba, 0x75, 0xcb, 0xa0, 0x9a, 0x68, 0x4b, 0x04, 0xd8, 0x11, 0x18, 0x79, 0xd3, 0xe2, 0xcc, 0xd8, 0xb9, 0x4d, 0x3c, 0x5c, 0xf6, 0xc5, 0x57, 0x53, 0xf0, 0xed, 0x95, 0x87, 0x91, 0x0b, 0x3c, 0x77, 0x25, 0x8a, 0x01, 0x46, 0x0f, 0xe8, 0x4c, 0x2e, 0xde, 0x57, 0x64, 0xee, 0xbe, 0x9c, 0x37, 0xfb, 0x95, 0xcd, 0x69, 0xce, 0xaf, 0x09, 0xf4, 0xb1, 0x35, 0x7c, 0x27, 0x63, 0x14, 0xab, 0x43, 0xec, 0x5b, 0x3c, 0xef, 0xb0, 0x40, 0x3f, 0x86, 0x8f, 0x68, 0x8e, 0x2e, 0xc0, 0x9a, 0x49, 0x73, 0xe9, 0x87, 0x75, 0x6f, 0x8d, 0xa7, 0xa1, 0x01, 0xa2, 0xca, 0x75, 0xa5, 0x4a, 0x8c, 0x4c, 0xcf, 0x9a, 0x1b, 0x61, 0x47, 0xe4, 0xde, 0x56, 0x42, 0x3a, 0xf7, 0x0b, 0x20, 0x67, 0x17, 0x9c, 0x5e, 0xeb, 0x64, 0x68, 0x67, 0x86, 0x34, 0x78, 0xd7, 0x52, 0xc7, 0xf4, 0x12, 0xdb, 0x27, 0x75, 0x41, 0x57, 0x5a, 0xa0, 0x61, 0x9d, 0x30, 0xbc, 0xcc, 0x8d, 0x87, 0xe6, 0x17, 0x0b, 0x33, 0x43, 0x9a, 0x2c, 0x93, 0xf2, 0xd9, 0x7e, 0x18, 0xc0, 0xa8, 0x23, 0x43, 0xa6, 0x01, 0x2a, 0x5b, 0xb1, 0x82, 0x28, 0x08, 0xf0, 0x1b, 0x5c, 0xfd, 0x85, 0x67, 0x3a, 0xc0, 0x96, 0x4c, 0x5f, 0x3c, 0xfd, 0x2d, 0xaf, 0x81, 0x42, 0x35, 0x97, 0x64, 0xa9, 0xad, 0xb9, 0xe3, 0xf7, 0x6d, 0xb6, 0x13, 0x46, 0x1c, 0x1b, 0xc9, 0x13, 0xdc, 0x9a, 0xc0, 0xab, 0x50, 0xd3, 0x65, 0xf7, 0x7c, 0xb9, 0x31, 0x94, 0xc9, 0x8a, 0xa9, 0x66, 0xd8, 0x9c, 0xdd, 0x55, 0x51, 0x25, 0xa5, 0xe5, 0x9e, 0xcf, 0x4f, 0xa3, 0xf0, 0xc3, 0xfd, 0x61, 0x0c, 0xd3, 0xd0, 0x56, 0x43, 0x93, 0x38, 0xfd, 0x81 ]
    
    static let DAPP_KEY_PUBLIC_EXPONENT: [UInt8] = [ 0x00, 0x01, 0x00, 0x01 ]
    
}
